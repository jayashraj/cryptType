{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledPage","styled","div","App","useState","inputValue","changeInputValue","changeInputBoxValue","randomValue","changeRandomValue","currentWord","changeCurrentWord","darkTheme","setDarkTheme","copied","setCopied","console","log","saveText","download","text","replace","date","Date","now","name","content","link","document","createElement","file","Blob","type","href","URL","createObjectURL","click","downloadPlainText","toString","navigator","clipboard","writeText","then","clearAll","addLetter","letter","className","onClick","getElementById","focus","style","backgroundColor","color","autoFocus","id","readOnly","onKeyDown","event","preventDefault","key","length","substr","Math","random","substring","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0OAKMA,EAAaC,IAAOC,IAAV,ufA4KDC,MApIf,WAAgB,IAAD,EAC0BC,mBAAS,IADnC,mBACNC,EADM,KACMC,EADN,OAEgCF,mBAAS,IAFzC,mBAESG,GAFT,aAG4BH,mBAAS,IAHrC,mBAGNI,EAHM,KAGOC,EAHP,OAI4BL,mBAAS,IAJrC,mBAINM,EAJM,KAIOC,EAJP,OAKqBP,oBAAS,GAL9B,mBAKNQ,EALM,KAKKC,EALL,OAMeT,oBAAS,GANxB,mBAMNU,EANM,KAMEC,EANF,KAObC,QAAQC,IAAIZ,GAEZ,IAAMa,EAAW,SAACC,GAChB,IAAIC,EAAOf,EACRgB,QAAQ,cAAe,IACvBA,QAAQ,cAAe,IACvBA,QAAQ,eAAgB,IACxBA,QAAQ,cAAe,IAE1B,GAAIF,EAAU,CACZ,IAAIG,EAAOC,KAAKC,OA1BtB,SAA2BC,EAAcC,GAEvC,IAAIC,EAAOC,SAASC,cAAc,KAC9BC,EAAO,IAAIC,KAAK,CAACL,GAAU,CAAEM,KAAM,eACvCL,EAAKM,KAAOC,IAAIC,gBAAgBL,GAChCH,EAAKR,SAAWM,EAChBE,EAAKS,QAqBDC,CAAkB,GAAD,OAAIf,EAAKgB,WAAT,QAA2BlB,QAE5CmB,UAAUC,UAAUC,UAAUrB,GAAMsB,MAAK,eAE3C3B,GAAU,IAEN4B,EAAW,WACfrC,EAAiB,IACjBG,EAAkB,IAClBE,EAAkB,KAEdiC,EAAY,SAACC,GACjBlC,EAAkB,IAClBF,EAAkBD,EAAcqC,GAChCvC,EAAiBD,EAAawC,IAGhC,OACE,eAAC7C,EAAD,CACE8C,UAAU,MACVC,QAAS,WAAO,IAAD,EACb,UAAAnB,SAASoB,eAAe,oBAAxB,SAAsCC,SAExCC,MACEtC,EACI,CAAEuC,gBAAiB,QAASC,MAAO,SACnC,CAAED,gBAAiB,QAASC,MAAO,SAR3C,UAWG5C,EACD,uBACE6C,WAAS,EACTC,GAAG,YACHC,UAAQ,EACRL,MACEtC,EACI,CAAEuC,gBAAiB,QAASC,MAAO,SACnC,CAAED,gBAAiB,QAASC,MAAO,SAEzCI,UAAW,SAACC,GACVA,EAAMC,iBAEJD,EAAME,IAAIC,OAAS,GACL,UAAdH,EAAME,KACQ,cAAdF,EAAME,MAEGF,EAAME,IAAIC,OAAS,GAAkB,SAAbH,EAAME,IACpB,SAAfjD,GAAyC,SAAfA,GAC5BQ,GAAS,GACT0B,EAAU,OACc,SAAflC,GAAyC,SAAfA,GACnCQ,GAAS,GACT0B,EAAU,MACc,SAAflC,GAAyC,SAAfA,GACnCG,GAAa,GACb+B,EAAU,OACc,UAAflC,GAA0C,UAAfA,GACpCG,GAAa,GACb+B,EAAU,OACc,UAAflC,GAA0C,UAAfA,EACpCiC,IAEAC,EAAU,MAEHa,EAAME,IAAIC,OAAS,GAAkB,aAAbH,EAAME,KACvChD,EAAkBD,EAAYmD,OAAO,EAAGnD,EAAYkD,OAAS,IAC7DtD,EAAiBD,EAAWwD,OAAO,EAAGxD,EAAWuD,OAAS,IAC1DnD,EAAkBD,EAAYqD,OAAO,EAAGrD,EAAYoD,OAAS,KACvC,KAAbH,EAAME,IACI,SAAfjD,GAAyC,SAAfA,GAC5BQ,GAAS,GACT0B,EAAU,MACc,SAAflC,GAAyC,SAAfA,GACnCQ,GAAS,GACT0B,EAAU,MACc,SAAflC,GAAyC,SAAfA,GACnCG,GAAa,GACb+B,EAAU,MACc,UAAflC,GAA0C,UAAfA,GACpCG,GAAa,GACb+B,EAAU,MACc,UAAflC,GAA0C,UAAfA,EACpCiC,IAEAC,EAAU,MAGZnC,EACED,EAAcsD,KAAKC,SAASzB,SAAS,IAAI0B,UAAU,EAAG,IAExDrD,EAAkBD,EAAc+C,EAAME,KACtCrD,EAAiBD,EAAaoD,EAAME,KACpC5C,GAAU,KAGZR,EAAoB,OAGxB,qBACEuC,UAAU,WACVI,MACEpC,EACI,CAAEsC,MAAO,SACTxC,EACA,CAAEwC,MAAO,SACT,CAAEA,MAAO,SAPjB,mBCrJca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5C,SAASoB,eAAe,SD4HpB,kBAAmBT,WACrBA,UAAUkC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.45141f0f.chunk.js","sourcesContent":["import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport styled from \"styled-components\";\r\nimport \"./App.css\";\r\n\r\nconst StyledPage = styled.div`\r\n  font-size: 30px;\r\n  padding: 10px;\r\n  cursor: text;\r\n  height: 100vh;\r\n  white-space: pre-wrap;\r\n\r\n  input {\r\n    border: none;\r\n    width: 0px;\r\n    font-size: 30px;\r\n\r\n    &:focus {\r\n      outline: none;\r\n    }\r\n  }\r\n  .animated {\r\n    opacity: 0.87;\r\n    display: inline-block;\r\n    position: relative;\r\n    left: -5px;\r\n\r\n    animation: blink-animation 2s steps(5, start) infinite;\r\n  }\r\n  @keyframes blink-animation {\r\n    to {\r\n      visibility: hidden;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction downloadPlainText(name: string, content: string) {\r\n  //https://stackoverflow.com/questions/35547835/how-to-create-txt-file-in-javascript\r\n  var link = document.createElement(\"a\");\r\n  var file = new Blob([content], { type: \"text/plain\" });\r\n  link.href = URL.createObjectURL(file);\r\n  link.download = name;\r\n  link.click();\r\n}\r\n\r\nfunction App() {\r\n  const [inputValue, changeInputValue] = useState(\"\");\r\n  const [inputBoxValue, changeInputBoxValue] = useState(\"\");\r\n  const [randomValue, changeRandomValue] = useState(\"\");\r\n  const [currentWord, changeCurrentWord] = useState(\"\");\r\n  const [darkTheme, setDarkTheme] = useState(false);\r\n  const [copied, setCopied] = useState(false);\r\n  console.log(inputValue);\r\n\r\n  const saveText = (download: boolean) => {\r\n    let text = inputValue\r\n      .replace(/:[cC]opy ?/g, \"\")\r\n      .replace(/:[dD]ark ?/g, \"\")\r\n      .replace(/:[lL]ight ?/g, \"\")\r\n      .replace(/:[sS]ave ?/g, \"\");\r\n\r\n    if (download) {\r\n      let date = Date.now();\r\n      downloadPlainText(`${date.toString()}.txt`, text);\r\n    } else {\r\n      navigator.clipboard.writeText(text).then(() => {});\r\n    }\r\n    setCopied(true);\r\n  };\r\n  const clearAll = () => {\r\n    changeInputValue(\"\");\r\n    changeRandomValue(\"\");\r\n    changeCurrentWord(\"\");\r\n  };\r\n  const addLetter = (letter: string) => {\r\n    changeCurrentWord(\"\");\r\n    changeRandomValue(randomValue + letter);\r\n    changeInputValue(inputValue + letter);\r\n  };\r\n\r\n  return (\r\n    <StyledPage\r\n      className=\"App\"\r\n      onClick={() => {\r\n        document.getElementById(\"input-box\")?.focus();\r\n      }}\r\n      style={\r\n        darkTheme\r\n          ? { backgroundColor: \"black\", color: \"white\" }\r\n          : { backgroundColor: \"white\", color: \"black\" }\r\n      }\r\n    >\r\n      {randomValue}\r\n      <input\r\n        autoFocus\r\n        id=\"input-box\"\r\n        readOnly\r\n        style={\r\n          darkTheme\r\n            ? { backgroundColor: \"black\", color: \"white\" }\r\n            : { backgroundColor: \"white\", color: \"black\" }\r\n        }\r\n        onKeyDown={(event: KeyboardEvent<HTMLInputElement>) => {\r\n          event.preventDefault();\r\n          if (\r\n            event.key.length > 1 &&\r\n            event.key !== \"Enter\" &&\r\n            event.key !== \"Backspace\"\r\n          ) {\r\n          } else if (event.key.length > 1 && event.key == \"Enter\") {\r\n            if (currentWord == \":copy\" || currentWord == \":Copy\") {\r\n              saveText(false);\r\n              addLetter(\"\\n\");\r\n            } else if (currentWord == \":save\" || currentWord == \":Save\") {\r\n              saveText(true);\r\n              addLetter(\" \");\r\n            } else if (currentWord == \":dark\" || currentWord == \":Dark\") {\r\n              setDarkTheme(true);\r\n              addLetter(\"\\n\");\r\n            } else if (currentWord == \":light\" || currentWord == \":Light\") {\r\n              setDarkTheme(false);\r\n              addLetter(\"\\n\");\r\n            } else if (currentWord == \":clear\" || currentWord == \":Clear\") {\r\n              clearAll();\r\n            } else {\r\n              addLetter(\"\\n\");\r\n            }\r\n          } else if (event.key.length > 1 && event.key == \"Backspace\") {\r\n            changeCurrentWord(currentWord.substr(0, currentWord.length - 1));\r\n            changeInputValue(inputValue.substr(0, inputValue.length - 1));\r\n            changeRandomValue(randomValue.substr(0, randomValue.length - 1));\r\n          } else if (event.key == \" \") {\r\n            if (currentWord == \":copy\" || currentWord == \":Copy\") {\r\n              saveText(false);\r\n              addLetter(\" \");\r\n            } else if (currentWord == \":save\" || currentWord == \":Save\") {\r\n              saveText(true);\r\n              addLetter(\" \");\r\n            } else if (currentWord == \":dark\" || currentWord == \":Dark\") {\r\n              setDarkTheme(true);\r\n              addLetter(\" \");\r\n            } else if (currentWord == \":light\" || currentWord == \":Light\") {\r\n              setDarkTheme(false);\r\n              addLetter(\" \");\r\n            } else if (currentWord == \":clear\" || currentWord == \":Clear\") {\r\n              clearAll();\r\n            } else {\r\n              addLetter(\" \");\r\n            }\r\n          } else {\r\n            changeRandomValue(\r\n              randomValue + Math.random().toString(36).substring(2, 3)\r\n            );\r\n            changeCurrentWord(currentWord + event.key);\r\n            changeInputValue(inputValue + event.key);\r\n            setCopied(false);\r\n          }\r\n\r\n          changeInputBoxValue(\"\");\r\n        }}\r\n      />\r\n      <div\r\n        className=\"animated\"\r\n        style={\r\n          copied\r\n            ? { color: \"green\" }\r\n            : darkTheme\r\n            ? { color: \"white\" }\r\n            : { color: \"black\" }\r\n        }\r\n      >\r\n        |\r\n      </div>\r\n    </StyledPage>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}